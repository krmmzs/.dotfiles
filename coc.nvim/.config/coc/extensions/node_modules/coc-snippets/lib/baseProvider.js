"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const minimatch_1 = __importDefault(require("minimatch"));
const util_1 = require("./util");
class BaseProvider {
    constructor(config, channel) {
        this.config = config;
        this.channel = channel;
    }
    async checkContext(_context) {
        return true;
    }
    isIgnored(filepath) {
        let ignored = false;
        let { excludes } = this.config;
        for (let p of excludes) {
            if (minimatch_1.default(filepath, p, { dot: true })) {
                ignored = true;
                this.info(`File ignored by excludePatterns: ${filepath}`);
                break;
            }
        }
        return ignored;
    }
    getExtendsFiletypes(filetype, exists = new Set()) {
        if (exists.has(filetype))
            return [];
        let extend = this.config.extends ? this.config.extends[filetype] : null;
        exists.add(filetype);
        if (!extend || extend.length == 0)
            return [];
        return extend.reduce((arr, curr) => {
            return arr.concat([curr], this.getExtendsFiletypes(curr, exists));
        }, []);
    }
    getFiletypes(filetype) {
        let filetypes = [filetype];
        if (filetype.indexOf('.') !== -1) {
            filetypes.push(...filetype.split('.'));
        }
        if (filetype == 'latex')
            filetypes.push('tex');
        if (filetype == 'javascriptreact' && !filetypes.includes('javascript')) {
            filetypes.push('javascript');
        }
        if (filetype == 'typescriptreact' && !filetypes.includes('typescript')) {
            filetypes.push('typescript');
        }
        let extendFiletypes = filetypes.reduce((arr, curr) => {
            return arr.concat(this.getExtendsFiletypes(curr));
        }, []);
        filetypes.push(...extendFiletypes);
        return util_1.distinct(filetypes);
    }
    message(kind, msg, data) {
        this.channel.appendLine(`[${kind} ${(new Date()).toLocaleTimeString()}] ${msg}`);
        if (data !== undefined)
            this.channel.appendLine(JSON.stringify(data, null, 2));
    }
    info(msg, data) {
        this.message('Info', msg, data);
    }
    error(msg, data) {
        this.message('Error', msg, data);
    }
    trace(msg, data) {
        if (this.config.trace) {
            this.message('Trace', msg, data);
        }
    }
}
exports.default = BaseProvider;
